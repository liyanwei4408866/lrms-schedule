package com.pl.schedule.protocol.udp;import java.net.DatagramSocket;import java.net.Inet4Address;import java.net.InetAddress;import java.net.SocketException;import java.net.UnknownHostException;import java.text.ParseException;import java.text.SimpleDateFormat;import java.util.Arrays;import java.util.Date;import com.pl.schedule.utils.UdpInfo;public class Utils{    private static SimpleDateFormat DATETIMEFORMAT = new SimpleDateFormat("yyyyMMddHHmmss");    private static SimpleDateFormat DATEFORMAT     = new SimpleDateFormat("yyyyMMdd");    private static SimpleDateFormat TIMEFORMAT     = new SimpleDateFormat("HHmmss");    public static InetAddress getServerAddress()    {        String serverIP = UdpInfo.getServerIP();        try        {            Inet4Address addr = (Inet4Address) Inet4Address.getByName(serverIP);            return addr;        }        catch (UnknownHostException var3)        {            var3.printStackTrace();            return null;        }    }    // public static String getPropertyPath()    // {    // String path = Utils.class.getResource("/").getFile();    // return path + "ps.properties";    // }    public static DatagramSocket getUDPConn(InetAddress serverAddress)    {        try        {            DatagramSocket conn = new DatagramSocket(UdpInfo.getServerPort(), serverAddress);            conn.setSoTimeout(10);            return conn;        }        catch (SocketException var2)        {            var2.printStackTrace();            return null;        }    }    public static String parseSn(byte[] buff)    {        return String.valueOf(byteToInt(buff));    }    public static byte[] date2Bytes(Date date)    {        byte[] buff = new byte[4];        String dt = DATEFORMAT.format(date);        for (int i = 0; i < buff.length; ++i)        {            String tmp = dt.substring(i * 2, (i + 1) * 2);            buff[i] = (byte) Integer.parseInt(tmp, 16);        }        return buff;    }    public static byte[] hourToBytes(Date date)    {        byte[] buff = new byte[1];        try        {            String dt = new SimpleDateFormat("HH").format(date);            for (int i = 0; i < buff.length; ++i)            {                String tmp = dt.substring(i * 2, (i + 1) * 2);                buff[i] = (byte) Integer.parseInt(tmp, 16);            }        }        catch (Exception e)        {            e.printStackTrace();        }        return buff;    }    public static byte[] minuteToBytes(Date date)    {        byte[] buff = new byte[1];        try        {            String dt = new SimpleDateFormat("mm").format(date);            for (int i = 0; i < buff.length; ++i)            {                String tmp = dt.substring(i * 2, (i + 1) * 2);                buff[i] = (byte) Integer.parseInt(tmp, 16);            }        }        catch (Exception e)        {            e.printStackTrace();        }        return buff;    }    public static byte[] secondToBytes(Date date)    {        byte[] buff = new byte[1];        try        {            String dt = new SimpleDateFormat("ss").format(date);            for (int i = 0; i < buff.length; ++i)            {                String tmp = dt.substring(i * 2, (i + 1) * 2);                buff[i] = (byte) Integer.parseInt(tmp, 16);            }        }        catch (Exception e)        {            e.printStackTrace();        }        return buff;    }    public static Date toDate(byte[] buff)    {        String result = "";        for (int i = 0; i < buff.length; ++i)        {            if (buff[i] < 10)            {                result = result + "0";            }            result = result + Integer.toHexString(buff[i]);        }        try        {            return DATEFORMAT.parse(result);        }        catch (ParseException var3)        {            var3.printStackTrace();            return new Date(0L);        }    }    public static byte[] dateTime2Bytes(Date date)    {        byte[] buff = new byte[7];        String dt = DATETIMEFORMAT.format(date);        for (int i = 0; i < buff.length; ++i)        {            String tmp = dt.substring(i * 2, (i + 1) * 2);            buff[i] = (byte) Integer.parseInt(tmp, 16);        }        return buff;    }    public static Date toDateTime(byte[] buff)    {        String result = "";        for (int i = 0; i < buff.length; ++i)        {            if (buff[i] < 10)            {                result = result + "0";            }            result = result + Integer.toHexString(buff[i]);        }        try        {            return DATETIMEFORMAT.parse(result);        }        catch (ParseException var3)        {            var3.printStackTrace();            return new Date(0L);        }    }    public static Date toTime(byte[] buff)    {        String result = "";        for (int i = 0; i < buff.length; ++i)        {            if (buff[i] < 10)            {                result = result + "0";            }            result = result + Integer.toHexString(buff[i]);        }        try        {            return TIMEFORMAT.parse(result);        }        catch (ParseException var3)        {            var3.printStackTrace();            return new Date(0L);        }    }    public static long byteToInt(byte[] b)    {        long value = 0L;        for (int i = 0; i < b.length; ++i)        {            long shift = (long) (i * 8);            value += (long) (b[i] & 255) << (int) shift;        }        return value;    }    public static byte[] int2Hex(int n)    {        byte[] buf = new byte[1];        String v = String.valueOf(n);        buf[0] = (byte) Integer.parseInt(v, 16);        return buf;    }    public static byte[] int2Byte(long n)    {        byte[] buf = new byte[]        {            (byte) ((int) n), (byte) ((int) (n >> 8)), (byte) ((int) (n >> 16)), (byte) ((int) (n >> 24))        };        return buf;    }    public static byte[] int2Byte(int n, int size)    {        byte[] buf = new byte[size];        for (int i = 0; i < size; ++i)        {            buf[i] = (byte) (n >> i * 8);        }        return buf;    }    public static byte[] ip2Bytes(String ip)    {        byte[] ipBytes = new byte[4];        String[] tmp = ip.split("\\.");        for (int i = 0; i < 4; ++i)        {            ipBytes[i] = (byte) Integer.parseInt(tmp[i]);        }        return ipBytes;    }    public static String bytes2Ip(byte[] buff)    {        String ip = "";        for (int i = 0; i < 4; ++i)        {            long tmp = byteToInt(Arrays.copyOfRange(buff, i, i + 1));            ip = ip + String.valueOf(tmp) + ".";        }        return ip.substring(0, ip.length() - 1);    }    public static String toHexString(byte[] buff)    {        return toHexString(buff, "");    }    public static String toHexString(byte[] buff, String separator)    {        if (buff == null)        {            return "";        }        else        {            StringBuffer sb = new StringBuffer(buff.length * 2);            for (int i = 0; i < buff.length; ++i)            {                int v = buff[i] & 255;                String t = Integer.toHexString(v);                if (t.length() < 2)                {                    sb.append("0");                }                sb.append(t);                sb.append(separator);            }            return sb.substring(0, sb.length() - separator.length());        }    }    public static String toHexStringByIndex(byte[] buff, int index)    {        if (buff == null || index > buff.length)        {            return "";        }        else        {            StringBuffer sb = new StringBuffer(buff.length * 2);            for (int i = 0; i < buff.length; ++i)            {                if (index == i)                {                    int v = buff[i] & 255;                    String t = Integer.toHexString(v);                    if (t.length() < 2)                    {                        sb.append("0");                    }                    sb.append(t);                }            }            return sb.substring(0, sb.length());        }    }    public static void main(String[] args)    {        // byte[] t = new byte[]{54, 63, 56, -36, 0, 0, 0, 0};        // System.out.println(byteToInt(t));        System.out.println(int2Byte(123277317l));    }}