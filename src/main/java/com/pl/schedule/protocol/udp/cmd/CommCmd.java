package com.pl.schedule.protocol.udp.cmd;import java.io.IOException;import java.net.DatagramPacket;import java.net.DatagramSocket;import java.net.InetAddress;import java.util.Arrays;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import com.pl.schedule.protocol.udp.Utils;public abstract class CommCmd {    protected final Logger          LOGGER        = LoggerFactory.getLogger(getClass());	protected byte[] cmdBuf = new byte[64];	private static InetAddress serverAddress = Utils.getServerAddress();	protected static DatagramSocket conn;	protected DatagramPacket packet;	protected byte[] recvBuff;	protected String ip;	protected byte[] sn;	static {		conn = Utils.getUDPConn(serverAddress);	}	public CommCmd(String ip, byte[] sn) {		this.ip = ip;		this.sn = Arrays.copyOf(sn, sn.length);		try {			InetAddress address = InetAddress.getByName(ip);			this.packet = new DatagramPacket(this.cmdBuf, this.cmdBuf.length, address, 60000);		} catch (Exception var5) {			var5.printStackTrace();		}	}	public void execute() {		try {            LOGGER.debug("   Send:{}", Utils.toHexString(this.packet.getData(), " "));			conn.send(this.packet);            LOGGER.debug("conn.send(this.packet);");			this.recv();            LOGGER.debug("Receive:{}", Utils.toHexString(this.recvBuff, " "));		} catch (Throwable var2) {			var2.printStackTrace();		}	}	public void recv() {		this.recvBuff = new byte[64];		DatagramPacket recvPack = new DatagramPacket(this.recvBuff, this.recvBuff.length);		try {			conn.receive(recvPack);		} catch (IOException var3) {			var3.printStackTrace();		}	}	public void copy(byte[] ori, byte[] dest, int from, int offset, int length) {		for (int i = 0; i < length; ++i) {			dest[offset + i] = ori[from + i];		}	}	public void copy(byte[] ori, byte[] dest, int offset, int length) {		this.copy(ori, dest, 0, offset, length);	}	public void rightPad(byte[] buff, byte pad, int offset, int length) {		if (offset + length > buff.length) {			length = buff.length - offset;		}		for (int i = 0; i < length; ++i) {			buff[offset + i] = pad;		}	}    public byte[] getRecvBuff()    {        return recvBuff;    }}